// Mocks generated by Mockito 5.3.2 from annotations
// in auth/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;
import 'dart:convert' as _i22;
import 'dart:typed_data' as _i23;

import 'package:auth/data/datasources/local/auth_local_data_source.dart'
    as _i16;
import 'package:auth/data/datasources/preferences/user_preferences.dart'
    as _i13;
import 'package:auth/data/datasources/remote/auth_remote_data_source.dart'
    as _i15;
import 'package:auth/data/model/user_model.dart' as _i2;
import 'package:auth/domain/entities/user.dart' as _i19;
import 'package:auth/domain/repositories/auth_repository.dart' as _i17;
import 'package:auth/domain/usecases/get_active_user.dart' as _i9;
import 'package:auth/domain/usecases/get_user.dart' as _i7;
import 'package:auth/domain/usecases/update_profile.dart' as _i8;
import 'package:auth/domain/usecases/user_login.dart' as _i4;
import 'package:auth/domain/usecases/user_logout.dart' as _i6;
import 'package:auth/domain/usecases/user_register.dart' as _i5;
import 'package:auth/presentation/bloc/auth_bloc.dart' as _i10;
import 'package:core/core.dart' as _i18;
import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i20;
import 'package:http/io_client.dart' as _i11;
import 'package:http/src/base_request.dart' as _i21;
import 'package:http/src/response.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserLogin_2 extends _i1.SmartFake implements _i4.UserLogin {
  _FakeUserLogin_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRegister_3 extends _i1.SmartFake implements _i5.UserRegister {
  _FakeUserRegister_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserLogout_4 extends _i1.SmartFake implements _i6.UserLogout {
  _FakeUserLogout_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUser_5 extends _i1.SmartFake implements _i7.GetUser {
  _FakeGetUser_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateProfile_6 extends _i1.SmartFake implements _i8.UpdateProfile {
  _FakeUpdateProfile_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetActiveUser_7 extends _i1.SmartFake implements _i9.GetActiveUser {
  _FakeGetActiveUser_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_8 extends _i1.SmartFake implements _i10.AuthState {
  _FakeAuthState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOStreamedResponse_9 extends _i1.SmartFake
    implements _i11.IOStreamedResponse {
  _FakeIOStreamedResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_10 extends _i1.SmartFake implements _i12.Response {
  _FakeResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferences extends _i1.Mock implements _i13.UserPreferences {
  MockUserPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<void> cacheToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #cacheToken,
          [token],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> clearTokenCache() => (super.noSuchMethod(
        Invocation.method(
          #clearTokenCache,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<String> getCacheToken() => (super.noSuchMethod(
        Invocation.method(
          #getCacheToken,
          [],
        ),
        returnValue: _i14.Future<String>.value(''),
      ) as _i14.Future<String>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i15.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i2.UserModel> getUser(String? token) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [token],
        ),
        returnValue: _i14.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #getUser,
            [token],
          ),
        )),
      ) as _i14.Future<_i2.UserModel>);
  @override
  _i14.Future<_i2.UserModel> register(
    String? name,
    String? email,
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            email,
            username,
            password,
          ],
        ),
        returnValue: _i14.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #register,
            [
              name,
              email,
              username,
              password,
            ],
          ),
        )),
      ) as _i14.Future<_i2.UserModel>);
  @override
  _i14.Future<_i2.UserModel> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i14.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i14.Future<_i2.UserModel>);
  @override
  _i14.Future<_i2.UserModel> updateProfile(
    String? token,
    String? name,
    String? email,
    String? username,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [
            token,
            name,
            email,
            username,
          ],
        ),
        returnValue: _i14.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #updateProfile,
            [
              token,
              name,
              email,
              username,
            ],
          ),
        )),
      ) as _i14.Future<_i2.UserModel>);
  @override
  _i14.Future<bool> logout(String? token) => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [token],
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i16.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<void> cacheToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #cacheToken,
          [token],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> clearTokenCache() => (super.noSuchMethod(
        Invocation.method(
          #clearTokenCache,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<String> getCacheToken() => (super.noSuchMethod(
        Invocation.method(
          #getCacheToken,
          [],
        ),
        returnValue: _i14.Future<String>.value(''),
      ) as _i14.Future<String>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i17.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> getUser(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [token],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #getUser,
            [token],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> register(
    String? name,
    String? email,
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            email,
            username,
            password,
          ],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #register,
            [
              name,
              email,
              username,
              password,
            ],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> updateProfile(
    String? token,
    String? name,
    String? email,
    String? username,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [
            token,
            name,
            email,
            username,
          ],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #updateProfile,
            [
              token,
              name,
              email,
              username,
            ],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
  @override
  _i14.Future<_i3.Either<_i18.Failure, bool>> logout(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [token],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, bool>>.value(
            _FakeEither_1<_i18.Failure, bool>(
          this,
          Invocation.method(
            #logout,
            [token],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, bool>>);
  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> getActiveUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveUser,
          [],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #getActiveUser,
            [],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
}

/// A class which mocks [UserLogin].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLogin extends _i1.Mock implements _i4.UserLogin {
  MockUserLogin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> execute(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            email,
            password,
          ],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #execute,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
}

/// A class which mocks [UserRegister].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRegister extends _i1.Mock implements _i5.UserRegister {
  MockUserRegister() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> execute(
    String? name,
    String? email,
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            name,
            email,
            username,
            password,
          ],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #execute,
            [
              name,
              email,
              username,
              password,
            ],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
}

/// A class which mocks [UserLogout].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLogout extends _i1.Mock implements _i6.UserLogout {
  MockUserLogout() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i3.Either<_i18.Failure, bool>> execute(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [token],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, bool>>.value(
            _FakeEither_1<_i18.Failure, bool>(
          this,
          Invocation.method(
            #execute,
            [token],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, bool>>);
}

/// A class which mocks [GetUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUser extends _i1.Mock implements _i7.GetUser {
  MockGetUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> execute(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [token],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #execute,
            [token],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
}

/// A class which mocks [UpdateProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfile extends _i1.Mock implements _i8.UpdateProfile {
  MockUpdateProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> execute(
    String? token,
    String? name,
    String? email,
    String? username,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            token,
            name,
            email,
            username,
          ],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #execute,
            [
              token,
              name,
              email,
              username,
            ],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
}

/// A class which mocks [GetActiveUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetActiveUser extends _i1.Mock implements _i9.GetActiveUser {
  MockGetActiveUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i3.Either<_i18.Failure, _i19.User>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i14.Future<_i3.Either<_i18.Failure, _i19.User>>.value(
            _FakeEither_1<_i18.Failure, _i19.User>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i14.Future<_i3.Either<_i18.Failure, _i19.User>>);
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i10.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserLogin get userLogin => (super.noSuchMethod(
        Invocation.getter(#userLogin),
        returnValue: _FakeUserLogin_2(
          this,
          Invocation.getter(#userLogin),
        ),
      ) as _i4.UserLogin);
  @override
  _i5.UserRegister get userRegister => (super.noSuchMethod(
        Invocation.getter(#userRegister),
        returnValue: _FakeUserRegister_3(
          this,
          Invocation.getter(#userRegister),
        ),
      ) as _i5.UserRegister);
  @override
  _i6.UserLogout get userLogout => (super.noSuchMethod(
        Invocation.getter(#userLogout),
        returnValue: _FakeUserLogout_4(
          this,
          Invocation.getter(#userLogout),
        ),
      ) as _i6.UserLogout);
  @override
  _i7.GetUser get getUser => (super.noSuchMethod(
        Invocation.getter(#getUser),
        returnValue: _FakeGetUser_5(
          this,
          Invocation.getter(#getUser),
        ),
      ) as _i7.GetUser);
  @override
  _i8.UpdateProfile get updateProfile => (super.noSuchMethod(
        Invocation.getter(#updateProfile),
        returnValue: _FakeUpdateProfile_6(
          this,
          Invocation.getter(#updateProfile),
        ),
      ) as _i8.UpdateProfile);
  @override
  _i9.GetActiveUser get getActiveUser => (super.noSuchMethod(
        Invocation.getter(#getActiveUser),
        returnValue: _FakeGetActiveUser_7(
          this,
          Invocation.getter(#getActiveUser),
        ),
      ) as _i9.GetActiveUser);
  @override
  _i10.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.AuthState);
  @override
  _i14.Stream<_i10.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i10.AuthState>.empty(),
      ) as _i14.Stream<_i10.AuthState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i10.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i10.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i10.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i10.AuthEvent>(
    _i20.EventHandler<E, _i10.AuthState>? handler, {
    _i20.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i20.Transition<_i10.AuthEvent, _i10.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  void onChange(_i20.Change<_i10.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IOClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOClient extends _i1.Mock implements _i11.IOClient {
  MockIOClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i11.IOStreamedResponse> send(_i21.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue: _i14.Future<_i11.IOStreamedResponse>.value(
            _FakeIOStreamedResponse_9(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i14.Future<_i11.IOStreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<_i12.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<_i12.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i14.Future<_i12.Response>);
  @override
  _i14.Future<_i12.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<_i12.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i14.Future<_i12.Response>);
  @override
  _i14.Future<_i12.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i22.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i12.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i12.Response>);
  @override
  _i14.Future<_i12.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i22.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i12.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i12.Response>);
  @override
  _i14.Future<_i12.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i22.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i12.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i12.Response>);
  @override
  _i14.Future<_i12.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i22.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i12.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i12.Response>);
  @override
  _i14.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<String>.value(''),
      ) as _i14.Future<String>);
  @override
  _i14.Future<_i23.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<_i23.Uint8List>.value(_i23.Uint8List(0)),
      ) as _i14.Future<_i23.Uint8List>);
}
